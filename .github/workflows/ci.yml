name: Deploy docker hub

on:
  push:
    branches:
      - '**'

env:
  BASE_URL_STORYBOOK: https://ditmar.github.io/leetcode-storybook
jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '>=20.3.0'
          cache: 'yarn'

      - name: Install specific Yarn version
        run: |
          corepack enable
          corepack prepare yarn@1.22.22 --activate

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run lint
        run: yarn lint

      - name: Run lint:css
        run: yarn lint:css

      - name: Run test
        run: yarn test

  build-storybook:
    name: Build and Deploy Storybook
    runs-on: ubuntu-latest
    needs: quality-checks
    outputs:
      SANITIZED_BRANCH_NAME: ${{ steps.sanitize_branch_name.outputs.SANITIZED_BRANCH_NAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '>=18.19 <=18.21'
          cache: 'yarn'

      - name: Install specific Yarn version
        run: |
          corepack enable
          corepack prepare yarn@1.22.22 --activate

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build Storybook
        run: yarn build-storybook

      - name: Sanitize Branch name
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          SANITIZED_BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9-]/-/g')
          echo "SANITIZED_BRANCH_NAME=${SANITIZED_BRANCH_NAME}" >> "$GITHUB_OUTPUT"
        id: sanitize_branch_name

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-static
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

      - name: Deploy Storybook to branch
        if: github.ref_name != 'main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-static
          destination_dir: ${{ steps.sanitize_branch_name.outputs.SANITIZED_BRANCH_NAME }}
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
      - name: Show Storybook URL
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "Storybook is available at ${{ env.BASE_URL_STORYBOOK }}"
          else
            echo "Storybook is available at ${{ env.BASE_URL_STORYBOOK }}/${{ steps.sanitize_branch_name.outputs.SANITIZED_BRANCH_NAME }}/"
          fi

  build-and-push-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-storybook
    outputs:
      GIT_COMMIT_HASH: ${{ steps.set_outputs.outputs.GIT_COMMIT_HASH }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '>=18.19 <=18.21'
          cache: 'yarn'

      - name: Install specific Yarn version
        run: |
          corepack enable
          corepack prepare yarn@1.22.22 --activate

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build project
        run: yarn build

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup environment variables
        run: |
          echo "DOCKER_HUB_REPO=openscience" >> $GITHUB_ENV
          echo "DOCKER_USER_NAME=ditmar" >> $GITHUB_ENV

      - name: Get short commit hash
        id: get_commit_hash
        run: echo "GIT_COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build --build-arg WEB_APP=${{ env.GIT_COMMIT_HASH }} -t ${{ env.DOCKER_USER_NAME }}/${{ env.DOCKER_HUB_REPO }}:${{ env.GIT_COMMIT_HASH }} .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ env.DOCKER_USER_NAME }}/${{ env.DOCKER_HUB_REPO }}:${{ env.GIT_COMMIT_HASH }}

      - name: Clean up
        run: docker image prune -a -f

      - id: set_outputs
        run: echo "GIT_COMMIT_HASH=${{ env.GIT_COMMIT_HASH }}" >> $GITHUB_OUTPUT
